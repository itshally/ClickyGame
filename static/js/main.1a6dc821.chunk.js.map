{"version":3,"sources":["components/Score/index.js","components/Cards/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Score","x","className","id","CharacterCard","onClick","scoreCount","style","width","name","alt","src","image","Container","container","children","shuffle","require","alertify","App","state","data","currentScore","topScore","clicked","indexOf","push","setState","$","text","Alertify","length","this","slice","map","character","key","Component","minimalDialog","dialog","main","content","setContent","setup","options","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"igEA4BeA,G,YAzBD,SAAAC,GACT,OACK,yBAAKC,UAAU,SACV,yBAAKA,UAAU,gCACV,yBAAKA,UAAU,OACV,yBAAKA,UAAU,mBACV,2BAAOC,GAAG,SAAV,YAEL,yBAAKD,UAAU,mBACV,2BAAOC,GAAG,UAAV,6BAEL,yBAAKD,UAAU,mBACV,2BAAOA,UAAU,eAAeC,GAAG,gBAAnC,UACY,0BAAMA,GAAG,cAAT,MAFjB,KAIK,2BAAOD,UAAU,eAAeC,GAAG,oBAAnC,cACgB,0BAAMA,GAAG,iBAAT,Y,0CCL/BC,G,MAXO,SAAAH,GACjB,OACK,yBAAKC,UAAU,mBAAmBG,QAAS,kBAAMJ,EAAEK,WAAWL,EAAEE,KAAKI,MAAO,CAACC,MAAO,UAC/E,yBAAKN,UAAU,YAAYC,GAAIF,EAAEE,IAC5B,wBAAID,UAAU,cAAcD,EAAEQ,MAC9B,yBAAKC,IAAKT,EAAEQ,KAAME,IAAKV,EAAEW,YCG9BC,G,MARC,SAAAC,GACX,OACK,yBAAKZ,UAAU,qBACTY,EAAUC,Y,gBCDtBC,EAAUC,EAAQ,IAClBC,EAAWD,EAAQ,IA8FRE,E,2MAzFbC,MAAQ,CACNC,OACAC,aAAc,EACdC,SAAU,EACVC,QAAS,I,EAIXlB,WAAa,SAAAH,GAGX,IAAIqB,EAAU,EAAKJ,MAAMI,QACrBD,EAAW,EAAKH,MAAMG,UAEE,IAAzBC,EAAQC,QAAQtB,IACjBqB,EAAQE,KAAKvB,GACb,EAAKwB,SAAS,CACZN,KAAML,EAAQK,GACdC,aAAc,EAAKF,MAAME,aAAa,IAIxCM,IAAE,eAAeC,KAAK,EAAKT,MAAME,gBAEjCQ,EAAS,yCAGTF,IAAE,eAAeC,KAAK,GACnB,EAAKT,MAAME,aAAe,EAAKF,MAAMG,UACtCA,EAAW,EAAKH,MAAME,aAAa,EACnC,EAAKK,SAAS,CACZL,aAAc,EACdC,SAAUA,EACVC,QAAS,MAGX,EAAKG,SAAS,CACZL,aAAc,EACdE,QAAS,KAKbI,IAAE,kBAAkBC,KAAKN,IAGxB,EAAKH,MAAMI,QAAQO,SAAW,EAAKX,MAAMC,KAAKU,SAC/CD,EAAS,wCAITF,IAAE,eAAeC,KAAK,GACtBN,EAAW,EAAKH,MAAMI,QAAQO,OAC9B,EAAKJ,SAAS,CACZL,aAAc,EACdC,SAAU,EAAKH,MAAMI,QAAQO,OAC7BP,QAAS,KAEXI,IAAE,kBAAkBC,KAAK,c,wEAQpB,IAAD,OAGN,OACE,yBAAK3B,UAAU,iBACb,kBAAC,EAAD,KACE,yBAAKA,UAAU,OACZ8B,KAAKZ,MAAMC,KAAKY,MAAM,EAAE,GAAGC,IAAI,SAAAC,GAAS,OACvC,kBAAC,EAAD,CACEC,IAAKD,EAAUhC,GACfG,WAAY,EAAKA,WACjBH,GAAIgC,EAAUhC,GACdM,KAAM0B,EAAU1B,KAChBG,MAAOuB,EAAUvB,UAPvB,Y,GA1EQyB,aA6FlB,SAASP,EAAS7B,GAChBiB,EAASoB,eAAiBpB,EAASqB,OAAO,gBAAgB,WACtD,MAAO,CACHC,KAAK,SAASC,GACVT,KAAKU,WAAWD,IAEpBE,MAAM,WACF,MAAM,CACFC,QAAQ,CACJC,MAAO,oBAM3B3B,EAASoB,cAAcrC,GCzGL6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,iBACnDH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1a6dc821.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Score = x => {\r\n     return (\r\n          <div className=\"Score\">\r\n               <div className=\"container-fluid score-header\">\r\n                    <div className=\"row\">\r\n                         <div className=\"col-12 col-md-4\">\r\n                              <label id=\"title\">LUCIFER</label>\r\n                         </div>\r\n                         <div className=\"col-12 col-md-4\">\r\n                              <label id=\"status\">Click an image to begin!</label>\r\n                         </div>\r\n                         <div className=\"col-12 col-md-4\">\r\n                              <label className=\"score-labels\" id=\"score-holder\">\r\n                                   Score: <span id=\"scoreValue\">0</span>\r\n                              </label> | \r\n                              <label className=\"score-labels\" id=\"top-score-holder\">\r\n                                   Top Score: <span id=\"topScoreValue\">0</span>\r\n                              </label>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst CharacterCard = x => {\r\n     return (\r\n          <div className=\"card text-center\" onClick={() => x.scoreCount(x.id)} style={{width: 18 + 'rem'}}>\r\n               <div className=\"card-body\" id={x.id}>\r\n                    <h5 className=\"card-title\">{x.name}</h5>\r\n                    <img alt={x.name} src={x.image}/>\r\n               </div>\r\n          </div>\r\n     );\r\n}    \r\n\r\nexport default CharacterCard;","import React from 'react';\r\nimport './style.css';\r\n\r\nlet Container = container => {\r\n     return (\r\n          <div className=\"container wrapper\">\r\n               {container.children}\r\n          </div>\r\n     );\r\n}    \r\n\r\nexport default Container;","import React, { Component } from 'react';\r\nimport data from './data.json';\r\nimport CharacterCard from './components/Cards';\r\nimport Container from './components/Container';\r\nimport $ from 'jquery';\r\nvar shuffle = require('shuffle-array'),\r\n    alertify = require('alertifyjs');\r\n\r\n    var arrayOfImages = [];\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    data,\r\n    currentScore: 1,\r\n    topScore: 0,\r\n    clicked: []\r\n  };\r\n  \r\n  \r\n  scoreCount = id => {\r\n    \r\n    //declaring variables\r\n    let clicked = this.state.clicked;\r\n    let topScore = this.state.topScore;\r\n\r\n    if(clicked.indexOf(id) === -1){\r\n      clicked.push(id)\r\n      this.setState({ \r\n        data: shuffle(data),\r\n        currentScore: this.state.currentScore+1\r\n      });\r\n      \r\n      //displaying the current scores per right click\r\n      $('#scoreValue').text(this.state.currentScore);\r\n    }else{\r\n      Alertify(\r\n        `<h1 class=\"game-status\">You Lost</h1>`\r\n      )\r\n      $('#scoreValue').text(0);\r\n      if(this.state.currentScore > this.state.topScore){\r\n        topScore = this.state.currentScore-1;\r\n        this.setState({ \r\n          currentScore: 1,\r\n          topScore: topScore,\r\n          clicked: []\r\n        });\r\n      }else{\r\n        this.setState({ \r\n          currentScore: 1,\r\n          clicked: []\r\n        });\r\n      }\r\n      \r\n      //displaying the current top score\r\n      $('#topScoreValue').text(topScore);\r\n    }\r\n    \r\n    if(this.state.clicked.length === this.state.data.length){\r\n      Alertify(\r\n        `<h1 class=\"game-status\">You Win</h1>`\r\n      )\r\n\r\n      $('#scoreValue').text(0);\r\n      topScore = this.state.clicked.length;\r\n      this.setState({ \r\n        currentScore: 1,\r\n        topScore: this.state.clicked.length,\r\n        clicked: []\r\n      });\r\n      $('#topScoreValue').text('You Win!');\r\n    }   \r\n    \r\n  };\r\n  \r\n  \r\n\r\n\r\n  render(){\r\n    // console.log(this.state.data[0])\r\n    // console.log(o)\r\n    return (\r\n      <div className=\"App container\">\r\n        <Container>\r\n          <div className=\"row\">\r\n            {this.state.data.slice(0,9).map(character => (\r\n              <CharacterCard\r\n                key={character.id}\r\n                scoreCount={this.scoreCount}\r\n                id={character.id}\r\n                name={character.name}\r\n                image={character.image}\r\n              />\r\n            ))});\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nfunction Alertify(x) {\r\n  alertify.minimalDialog || alertify.dialog('minimalDialog',function(){\r\n      return {\r\n          main:function(content){\r\n              this.setContent(content); \r\n          },\r\n          setup:function(){\r\n              return{\r\n                  options:{\r\n                      title: 'Clicky Game'\r\n                  }\r\n              }\r\n          }\r\n      };\r\n  });\r\n  alertify.minimalDialog(x);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Score from './components/Score';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Score />, document.getElementById('score-header'));\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}